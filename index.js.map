{"version":3,"sources":["shaders/vert.glsl","shaders/frag.glsl","shaders/shaderUtils.ts","models/Vectors/Vec3.ts","models/Objects/Polyline.ts","models/Canvases/WebGLCanvas.ts","models/Canvases/MainCanvas.ts","models/Canvases/Canvas.ts","models/Canvases/ColorSelectionCanvas.ts","models/Canvases/HueSelectionCanvas.ts","models/Canvases/CanvasSettings.ts","models/Canvases/CanvasBackground.ts","index.ts"],"names":["module","exports"],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["module.exports=\"#define GLSLIFY 1\\nattribute vec3 prev_position;\\nattribute vec3 position;\\nattribute vec3 next_position;\\nattribute float side;\\nattribute vec2 uv;\\n\\nuniform vec2 u_resolution;\\n\\nvoid main() {\\n    //ratio wyświetlania\\n    vec2 aspect = vec2(u_resolution.x / u_resolution.y, 1);\\n    //przeliczanie z -1,1 na pixele\\n    vec2 nextScreen = next_position.xy * aspect;\\n    vec2 prevScreen = prev_position.xy * aspect;\\n    //tg do wyliczenia punktu po środku\\n    vec2 tangent = normalize(nextScreen - prevScreen);\\n    //odwrócamy vector\\n    vec2 normal = vec2(-tangent.y, tangent.x);\\n    //dzielimy przez aspect, żeby wrócić do -1,1\\n    normal /= aspect;\\n    //10% ekranu, bo o -1,1;\\n    //normal *= 0.1;\\n    normal *= (1.0 - pow(abs(uv.y - 0.5) * 2.0, 2.0)) * 0.1;\\n    float dist = length(nextScreen - prevScreen);\\n    normal *= smoothstep(0.0, 0.05, dist);\\n\\n    vec4 current = vec4(position,1);\\n    current.xy -= normal * side;\\n\\n    gl_Position = current;\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec4 u_color;\\n\\nvoid main() {\\n    gl_FragColor = u_color;\\n}\\n\";","//TODO: types?\r\nexport function createShader(gl:any, type:any, source:any) {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (success) {\r\n        return shader;\r\n    }\r\n    gl.deleteShader(shader);\r\n}\r\n//TODO: types?\r\nexport function createProgram(gl:any, vertexShader:any, fragmentShader:any) {\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (success) {\r\n        return program;\r\n    }\r\n    gl.deleteProgram(program);\r\n}\r\n","export class Vec3 {\r\n  constructor(x = 0, y = x, z = y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n  get y() {\r\n    return this[1];\r\n  }\r\n  get z() {\r\n    return this[2];\r\n  }\r\n  set x(i: number) {\r\n    this[0] = i;\r\n  }\r\n  set y(i: number) {\r\n    this[1] = i;\r\n  }\r\n  set z(i: number) {\r\n    this[2] = i;\r\n  }\r\n\r\n  set(x: number, y: number, z: number) {\r\n    this[0] = x;\r\n    this[1] = y;\r\n    this[2] = z;\r\n    return this;\r\n  }\r\n\r\n  copy() {\r\n    return new Vec3(this.x, this.y, this.z);\r\n  }\r\n\r\n  add(v: Vec3) {\r\n    return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n  }\r\n\r\n  sub(v: Vec3) {\r\n    return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n  }\r\n\r\n  scale(k: number) {\r\n    return new Vec3(this.x * k, this.y * k, this.z * k);\r\n  }\r\n\r\n  dot(v: Vec3) {\r\n    return this.x * v.x + this.y * v.y + this.z * v.z;\r\n  }\r\n\r\n  cross(v: Vec3) {\r\n    return new Vec3(\r\n      this.y * v.z - this.z * v.y,\r\n      this.z * v.x - this.x * v.z,\r\n      this.x * v.y - this.y * v.x\r\n    );\r\n  }\r\n\r\n  negate() {\r\n    return new Vec3(this.x * -1, this.y * -1, this.z * -1);\r\n  }\r\n\r\n  len() {\r\n    return Math.sqrt(this.x**2 + this.y**2 + this.z**2);\r\n  }\r\n\r\n  normalize() {\r\n    const len = this.len();\r\n    return new Vec3(this.x/len,this.y/len,this.z/len);\r\n  }\r\n\r\n  lerp(v, t) {\r\n    this.x = this.x + t * (v.x - this.x);\r\n    this.y = this.y + t * (v.y - this.y);\r\n    this.z = this.z + t * (v.z - this.z);\r\n  }\r\n\r\n  toArray(a: Float32Array,i=0) {\r\n    a[i] = this.x;\r\n    a[i+1] = this.y;\r\n    a[i+2] = this.z;\r\n    return a;\r\n  }\r\n}\r\n","import {Vec3} from \"../Vectors/Vec3\";\r\n\r\nexport class Polyline {\r\n    public points: Vec3[];\r\n    private count: number;\r\n\r\n    readonly position: Float32Array;\r\n    readonly next: Float32Array;\r\n    readonly prev: Float32Array;\r\n\r\n    readonly index: Uint16Array;\r\n    readonly side: Float32Array;\r\n    readonly uv: Float32Array;\r\n\r\n    constructor(points: Vec3[]) {\r\n        this.points = points;\r\n        this.count = points.length;\r\n        this.position = new Float32Array(this.count * 3 *2);\r\n        this.prev = new Float32Array(this.count * 3 *2);\r\n        this.next = new Float32Array(this.count * 3 *2);\r\n\r\n        this.index = new Uint16Array((this.count - 1) * 3 * 2);\r\n        this.side = new Float32Array(this.count * 2);\r\n        this.uv = new Float32Array(this.count * 2 * 2);\r\n\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.side.set([-1, 1], i * 2);\r\n            const v = i / (this.count - 1);\r\n            this.uv.set([0, v, 1, v], i * 4);\r\n            if (i === this.count - 1) continue;\r\n            const ind = i * 2;\r\n            this.index.set([ind, ind + 1, ind + 2], ind * 3);\r\n            this.index.set([ind + 2, ind + 1, ind + 3], (ind + 1) * 3);\r\n        }\r\n\r\n        this.updateGeometry();\r\n    }\r\n\r\n    private tmp: Vec3 = new Vec3();\r\n\r\n    updateGeometry() {\r\n        this.points.forEach((p, i) => {\r\n            p.toArray(this.position, i * 3 * 2);\r\n            p.toArray(this.position, i * 3 * 2 + 3);\r\n            if (!i) {\r\n                this.tmp = p.copy().sub(this.points[i + 1]).add(p);\r\n                this.tmp.toArray(this.prev, i * 3 * 2);\r\n                this.tmp.toArray(this.prev, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.next, (i - 1) * 3 * 2);\r\n                p.toArray(this.next, (i - 1) * 3 * 2 + 3);\r\n            }\r\n            if (i === this.points.length - 1) {\r\n                this.tmp = p.copy().sub(this.points[i - 1]).add(p);\r\n                this.tmp.toArray(this.next, i * 3 * 2);\r\n                this.tmp.toArray(this.next, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.prev, (i + 1) * 3 * 2);\r\n                p.toArray(this.prev, (i + 1) * 3 * 2 + 3);\r\n            }\r\n        });\r\n    }\r\n\r\n    stackNewPoint(v: Vec3){\r\n        this.points.push(v);\r\n        this.points.shift();\r\n        this.updateGeometry();\r\n    }\r\n}\r\n","// @ts-ignore\r\nimport vert from '../../shaders/vert.glsl';\r\n// @ts-ignore\r\nimport frag from '../../shaders/frag.glsl';\r\nimport {createProgram, createShader} from \"../../shaders/shaderUtils\";\r\nimport {Vec3} from \"../Vectors/Vec3\";\r\nimport {Polyline} from \"../Objects/Polyline\";\r\n\r\nexport abstract class WebGLCanvas {\r\n  private enabled: boolean = true;\r\n  private canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: WebGLRenderingContext;\r\n  private sizeMultiplier: number;\r\n  private vertexShader: WebGLShader;\r\n  private fragmentShader: WebGLShader;\r\n  private webGLProgram: WebGLProgram;\r\n  private primitiveType: GLenum;\r\n\r\n  private mouse: Vec3 = new Vec3();\r\n\r\n  private prev_positionBuffer;\r\n  private next_positionBuffer;\r\n  private positionBuffer;\r\n  private sideBuffer;\r\n  private uvBuffer;\r\n\r\n  private polyline: Polyline;\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    sizeMultiplier?: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"webgl\");\r\n    //this.primitiveType = this.canvasContext.TRIANGLES;\r\n    //this.primitiveType = this.canvasContext.LINES;\r\n    //this.primitiveType = this.canvasContext.TRIANGLE_STRIP;\r\n    this.webGLShadersInitialize();\r\n  }\r\n\r\n  webGLShadersInitialize = () => {\r\n    this.vertexShader = createShader(this.canvasContext,this.canvasContext.VERTEX_SHADER,vert);\r\n    this.fragmentShader = createShader(this.canvasContext,this.canvasContext.FRAGMENT_SHADER,frag);\r\n    this.webGLProgram = createProgram(this.canvasContext,this.vertexShader,this.fragmentShader);\r\n    this.canvasContext.enable(this.canvasContext.DEPTH_TEST);\r\n    this.canvasContext.useProgram(this.webGLProgram);\r\n\r\n    const prev_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"prev_position\");\r\n    const positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"position\");\r\n    const next_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"next_position\");\r\n    const sideAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"side\");\r\n    const uvAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"uv\");\r\n\r\n    this.prev_positionBuffer = this.canvasContext.createBuffer();\r\n    this.next_positionBuffer = this.canvasContext.createBuffer();\r\n    this.positionBuffer = this.canvasContext.createBuffer();\r\n    this.sideBuffer = this.canvasContext.createBuffer();\r\n    this.uvBuffer = this.canvasContext.createBuffer();\r\n\r\n    const colorUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_color\");\r\n    this.canvasContext.uniform4f(colorUniformLocation, Math.random(), Math.random(), Math.random(), 1);\r\n    //this.canvasContext.uniform4f(colorUniformLocation, 255, 0, 0, 1);\r\n\r\n    const resolutionUniformLocation  = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_resolution\");\r\n\r\n    this.resizeHandle();\r\n    this.canvasContext.viewport(0,0,this.canvasNode.width,this.canvasNode.height);\r\n    this.canvasContext.clearColor(0,0,0,0);\r\n    this.canvasContext.clear(this.canvasContext.COLOR_BUFFER_BIT | this.canvasContext.DEPTH_BUFFER_BIT);\r\n    this.canvasContext.uniform2f(resolutionUniformLocation,this.canvasNode.width,this.canvasNode.height);\r\n    const size = 3;          // 2 components per iteration\r\n    const type = this.canvasContext.FLOAT;   // the data is 32bit floats\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    const offset = 0;        // start at the beginning of the buffer\r\n\r\n    const count = 20;\r\n    const points: Vec3[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const x = i / (count - 1) - 0.5;\r\n      const y = 0;\r\n      const z = 0;\r\n      points.push(new Vec3(x,y,z));\r\n    };\r\n\r\n    this.polyline = new Polyline(points);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(prev_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(prev_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(next_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(next_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(sideAttributeLocation, 1, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(sideAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(uvAttributeLocation, 2, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(uvAttributeLocation);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,40);\r\n\r\n  };\r\n\r\n  drawCursor = (e) => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    this.mouse.x = (x/this.canvasNode.width)*2 -1;\r\n    this.mouse.y = (y/this.canvasNode.height)*-2+1;\r\n  };\r\n\r\n  private spring = 0.05;\r\n  private friction = 0.93;\r\n  private tmp = new Vec3();\r\n  private mouseVelocity: Vec3 = new Vec3();\r\n\r\n  draw() {\r\n    this.updateBuffersAndDraw();\r\n\r\n    for (let i = this.polyline.points.length - 1; i >= 0; i--) {\r\n      if (!i) {\r\n        this.tmp = this.mouse.copy();\r\n        this.tmp = this.tmp.sub(this.polyline.points[i]);\r\n        this.tmp = this.tmp.scale(this.spring);\r\n        this.mouseVelocity = this.mouseVelocity.add(this.tmp);\r\n        this.mouseVelocity = this.mouseVelocity.scale(this.friction);\r\n        this.polyline.points[i] = this.polyline.points[i].add(this.mouseVelocity);\r\n      } else {\r\n        this.polyline.points[i].lerp(this.polyline.points[i - 1], 0.9);\r\n      }\r\n    }\r\n\r\n    this.polyline.updateGeometry();\r\n\r\n    requestAnimationFrame(()=>this.draw());\r\n  }\r\n\r\n  updateBuffersAndDraw(){\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,40);\r\n  }\r\n\r\n  resizeHandle = () => {\r\n      const displayWidth  = this.canvasNode.clientWidth;\r\n      const displayHeight = this.canvasNode.clientHeight;\r\n\r\n      if (this.canvasNode.width  != displayWidth ||\r\n          this.canvasNode.height != displayHeight) {\r\n\r\n        this.canvasNode.width  = displayWidth;\r\n        this.canvasNode.height = displayHeight;\r\n      }\r\n\r\n  };\r\n\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\nimport {WebGLCanvas} from \"./WebGLCanvas\";\r\n\r\nexport class MainCanvas extends WebGLCanvas {\r\n  private isDrawing: boolean = false;\r\n  private mouseX: number = 0;\r\n  private mouseY: number = 0;\r\n  private settings: CanvasSettings;\r\n\r\n  constructor(canvasHolder: HTMLElement,settings: CanvasSettings,sizeMultiplier?:number, width?: number, height?: number) {\r\n    super(canvasHolder,'main-canvas',sizeMultiplier, width, height);\r\n    this.settings = settings;\r\n    this.canvasNode.addEventListener(\"mousedown\",this.startDrawing);\r\n    this.canvasNode.addEventListener(\"mouseup\",this.stopDrawing);\r\n    this.canvasNode.addEventListener(\"mousemove\",this.doDrawing);\r\n\r\n    this.canvasNode.addEventListener(\"touchstart\",this.startDrawing);\r\n    this.canvasNode.addEventListener(\"touchend\",this.stopDrawing);\r\n    this.canvasNode.addEventListener(\"touchmove\",this.doDrawing);\r\n\r\n\r\n    requestAnimationFrame(()=>this.draw());\r\n  }\r\n\r\n\r\n  startDrawing = (e: any) => {\r\n    this.isDrawing = true;\r\n    this.mouseX = e.offsetX;\r\n    this.mouseY = e.offsetY;\r\n  };\r\n\r\n  stopDrawing = () =>{\r\n    this.isDrawing = false;\r\n  };\r\n\r\n  doDrawing = (e: any) =>{\r\n        this.drawCursor(e);\r\n  };\r\n\r\n  /*draw = e => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    if (e.buttons !== 1) return;\r\n\r\n    this.canvasContext.beginPath(); // begin\r\n\r\n    this.canvasContext.lineWidth = this.settings.pencilWidth;\r\n    this.canvasContext.lineCap = \"round\";\r\n    this.canvasContext.strokeStyle = this.settings.currentColor;\r\n\r\n    this.canvasContext.moveTo(this.mouseX, this.mouseY); // from\r\n    this.canvasContext.lineTo(x, y); // to\r\n    this.mouseX = x;\r\n    this.mouseY = y;\r\n\r\n    this.canvasContext.stroke(); // draw it!\r\n  };*/\r\n}\r\n","export abstract class Canvas {\r\n  private enabled: boolean = true;\r\n  private canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: CanvasRenderingContext2D | null;\r\n  private sizeMultiplier: number;\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    sizeMultiplier: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"2d\");\r\n  }\r\n\r\n  resizeHandle = () => {\r\n    const currentImage = this.canvasContext!.getImageData(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.canvasNode.width = this.canvasHolder.clientWidth * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n    this.canvasNode.height = this.canvasHolder.clientHeight * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n\r\n    this.canvasContext!.putImageData(currentImage,0,0);\r\n  };\r\n\r\n  abstract draw() : void;\r\n\r\n  clear = () => {\r\n    this.canvasContext!.fillStyle = \"rgba(0,0,0,0)\";\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\n\r\nexport class ColorSelectionCanvas extends Canvas {\r\n  private selectedColor: string = \"rgba(255,0,0,1)\";\r\n  private drawingColor: string = \"rgba(255,0,0,1)\";\r\n  private selectedColorAsRGBAObject: {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a: number;\r\n  } = { r: 255, g: 0, b: 0, a: 1 };\r\n  /*private selectedColorAsHSLAObject: {\r\n    h: number;\r\n    s: number;\r\n    l: number;\r\n    a: number;\r\n  };*/\r\n  private isDragging: boolean = false;\r\n  private onColorSelect: (color: string) => any;\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    onColorSelect: (color: string) => any,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    super(canvasHolder,'color-selection-canvas',1, width, height);\r\n    this.onColorSelect = onColorSelect;\r\n    this.canvasNode.addEventListener(\"click\", this.changeColor);\r\n    this.canvasNode.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.changeColor(e);\r\n    });\r\n    this.canvasNode.addEventListener(\"mouseup\", e => {\r\n      this.isDragging = false;\r\n    });\r\n    this.canvasNode.addEventListener(\"mousemove\", e => {\r\n      if (this.isDragging) {\r\n        this.changeColor(e);\r\n      }\r\n    });\r\n    this.draw();\r\n  }\r\n\r\n  rgbatohsla = (r:number, g:number, b:number, a:number) => {\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n    if (delta == 0) h = 0;\r\n    else if (cmax == r) h = ((g - b) / delta) % 6;\r\n    else if (cmax == g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n    h = Math.round(h * 60);\r\n    if (h < 0) h += 360;\r\n    l = (cmax + cmin) / 2;\r\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n    //return \"hsla(\" + h + \",\" + s + \"%,\" +l + \"%,\" + a + \")\";\r\n    return { h, s, l, a };\r\n  };\r\n\r\n  hslatorgba = (h:number,s:number,l:number, a:number) => {\r\n    s /= 100;\r\n    l /= 100;\r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n        m = l - c/2,\r\n        r = 0,\r\n        g = 0,\r\n        b = 0;\r\n    if (0 <= h && h < 60) {\r\n      r = c; g = x; b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x; g = c; b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0; g = c; b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0; g = x; b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x; g = 0; b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c; g = 0; b = x;\r\n    }\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n    return {r,g,b,a};\r\n  };\r\n\r\n  setNewHue = (hue: number) => {\r\n    const hsla = this.rgbatohsla(\r\n      this.selectedColorAsRGBAObject.r,\r\n      this.selectedColorAsRGBAObject.g,\r\n      this.selectedColorAsRGBAObject.b,\r\n      this.selectedColorAsRGBAObject.a\r\n    );\r\n    const rgbaSelected = this.hslatorgba(hue,100,50,hsla.a);\r\n    const rgbaDrawing = this.hslatorgba(hue,hsla.s,hsla.l,hsla.a);\r\n    this.selectedColor = \"rgba(\" + rgbaSelected.r + \",\" + rgbaSelected.g + \",\" + rgbaSelected.b + \",\" + rgbaSelected.a + \")\";\r\n    this.drawingColor = \"rgba(\" + rgbaDrawing.r + \",\" + rgbaDrawing.g + \",\" + rgbaDrawing.b + \",\" + rgbaDrawing.a + \")\";\r\n    this.selectedColorAsRGBAObject = rgbaDrawing;\r\n    this.onColorSelect(this.drawingColor);\r\n    this.draw();\r\n  };\r\n\r\n  changeColor = (e: MouseEvent) => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n    this.drawingColor =\r\n      \"rgba(\" + imageData[0] + \",\" + imageData[1] + \",\" + imageData[2] + \",1)\";\r\n    this.selectedColorAsRGBAObject = {\r\n      r: imageData[0],\r\n      g: imageData[1],\r\n      b: imageData[2],\r\n      a: imageData[3]\r\n    };\r\n    this.onColorSelect(this.drawingColor);\r\n  };\r\n\r\n  drawGradientsOnColorSelectionCanvas = () => {\r\n    const grdWhite = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      0\r\n    );\r\n    grdWhite.addColorStop(0, \"rgba(255,255,255,1)\");\r\n    grdWhite.addColorStop(1, \"rgba(255,255,255,0)\");\r\n    this.canvasContext!.fillStyle = grdWhite;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n\r\n    const grdBlack = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      0,\r\n      this.canvasNode.height\r\n    );\r\n    grdBlack.addColorStop(0, \"rgba(0,0,0,0)\");\r\n    grdBlack.addColorStop(1, \"rgba(0,0,0,1)\");\r\n    this.canvasContext!.fillStyle = grdBlack;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n\r\n  draw = () => {\r\n    this.canvasContext!.fillStyle = this.selectedColor;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.drawGradientsOnColorSelectionCanvas();\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\n\r\nexport class HueSelectionCanvas extends Canvas {\r\n    private selectedHue: string = \"rgba(0,0,0,1)\";\r\n    private isDragging: boolean = false;\r\n    private onHueSelect: (hue:number) => any;\r\n\r\n    constructor(\r\n        canvasHolder: HTMLElement,\r\n        onHueSelect: (hue: number) => any,\r\n        width?: number,\r\n        height?: number\r\n    ) {\r\n        super(canvasHolder,'hue-selection-canvas',1, width, height);\r\n        this.onHueSelect = onHueSelect;\r\n        this.canvasNode.addEventListener(\"click\", this.changeHue);\r\n        this.canvasNode.addEventListener(\"mousedown\", e => {\r\n            this.isDragging = true;\r\n            this.changeHue(e);\r\n        });\r\n        this.canvasNode.addEventListener(\"mouseup\", e => {\r\n            this.isDragging = false;\r\n        });\r\n        this.canvasNode.addEventListener(\"mousemove\", e => {\r\n            if (this.isDragging) {\r\n                this.changeHue(e);\r\n            }\r\n        });\r\n        this.draw();\r\n    }\r\n\r\n    changeHue = (e: MouseEvent) => {\r\n        const x = e.offsetX;\r\n        const y = e.offsetY;\r\n        const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n        const hue = this.getHueFromRGB(imageData[0],imageData[1],imageData[2]);\r\n        this.onHueSelect(hue);\r\n    };\r\n\r\n    getHueFromRGB = (r:number, g:number, b:number) => {\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0\r\n        if (delta == 0) h = 0;\r\n        else if (cmax == r) h = ((g - b) / delta) % 6;\r\n        else if (cmax == g) h = (b - r) / delta + 2;\r\n        else h = (r - g) / delta + 4;\r\n        h = Math.round(h * 60);\r\n        if (h < 0) h += 360;\r\n        return h\r\n    };\r\n\r\n    draw = () => {\r\n        this.canvasContext!.rect(\r\n            0,\r\n            0,\r\n            this.canvasNode.width,\r\n            this.canvasNode.height\r\n        );\r\n        const grd1 = this.canvasContext!.createLinearGradient(\r\n            0,\r\n            0,\r\n            0,\r\n            this.canvasNode.height\r\n        );\r\n        grd1.addColorStop(0, \"rgba(255, 0, 0, 1)\");\r\n        grd1.addColorStop(0.17, \"rgba(255, 255, 0, 1)\");\r\n        grd1.addColorStop(0.34, \"rgba(0, 255, 0, 1)\");\r\n        grd1.addColorStop(0.51, \"rgba(0, 255, 255, 1)\");\r\n        grd1.addColorStop(0.68, \"rgba(0, 0, 255, 1)\");\r\n        grd1.addColorStop(0.85, \"rgba(255, 0, 255, 1)\");\r\n        grd1.addColorStop(1, \"rgba(255, 0, 0, 1)\");\r\n        this.canvasContext!.fillStyle = grd1;\r\n        this.canvasContext!.fill();\r\n    };\r\n}\r\n","import { ColorSelectionCanvas } from \"./ColorSelectionCanvas\";\r\nimport { HueSelectionCanvas } from \"./HueSelectionCanvas\";\r\n\r\nexport class CanvasSettings {\r\n  currentColor: string = \"rgba(255,0,0,1)\";\r\n  pencilWidth: number = 15;\r\n  private colorDisplay: HTMLElement;\r\n  private colorPicker: ColorSelectionCanvas;\r\n  private huePicker: HueSelectionCanvas;\r\n  private sizePicker: HTMLElement;\r\n\r\n  constructor(mainAppHolder: HTMLElement) {\r\n    const settingsHolder = document.createElement(\"div\");\r\n    settingsHolder.id = \"settings-holder\";\r\n    mainAppHolder.appendChild(settingsHolder);\r\n\r\n    const currentColorWrapper = document.createElement('div');\r\n    currentColorWrapper.id = \"current-color-wrapper\";\r\n    settingsHolder.appendChild(currentColorWrapper);\r\n\r\n    const currentlySelectedColor = document.createElement(\"div\");\r\n    currentlySelectedColor.id = \"current-color\";\r\n    currentlySelectedColor.style.background = this.currentColor;\r\n    currentColorWrapper.appendChild(currentlySelectedColor);\r\n    this.colorDisplay = currentlySelectedColor;\r\n\r\n    const sizePicker = document.createElement(\"input\");\r\n    sizePicker.type = \"range\";\r\n    sizePicker.min = \"1\";\r\n    sizePicker.max=\"50\";\r\n    sizePicker.value = \"15\";\r\n    sizePicker.oninput = this.changePencilSize;\r\n    sizePicker.id = \"pencil-size-picker\";\r\n    settingsHolder.appendChild(sizePicker);\r\n    this.sizePicker = sizePicker;\r\n\r\n    const colorSelectionWrapper = document.createElement(\"div\");\r\n    colorSelectionWrapper.id = \"color-selection-wrapper\";\r\n    settingsHolder.appendChild(colorSelectionWrapper);\r\n\r\n    const hueSelectionWrapper = document.createElement(\"div\");\r\n    hueSelectionWrapper.id = \"hue-selection-wrapper\";\r\n    settingsHolder.appendChild(hueSelectionWrapper);\r\n\r\n    this.colorPicker = new ColorSelectionCanvas(\r\n      colorSelectionWrapper,\r\n      this.changeCurrentlySelectedColor\r\n    );\r\n    this.huePicker = new HueSelectionCanvas(\r\n      hueSelectionWrapper,\r\n      this.colorPicker.setNewHue\r\n    );\r\n    this.changeCurrentlySelectedColor(\"rgba(255,0,0,1)\");\r\n    this.changePencilSize({target: {value: \"15\"}})\r\n  }\r\n\r\n  changeCurrentlySelectedColor = (color: string) => {\r\n    this.currentColor = color;\r\n    this.colorDisplay.style.background = color;\r\n  };\r\n\r\n  //TODO: change this type to proper one\r\n  changePencilSize = (size: any) => {\r\n    this.pencilWidth = Number(size.target.value);\r\n    this.colorDisplay.style.width = this.pencilWidth + \"px\";\r\n    this.colorDisplay.style.height = this.pencilWidth + \"px\";\r\n  }\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\n\r\nexport class CanvasBackground extends Canvas {\r\n  //private currentSetting: number;\r\n\r\n  constructor(mainAppHolder: HTMLElement,sizeMultiplier:number) {\r\n    super(mainAppHolder, \"background-canvas\",sizeMultiplier);\r\n  }\r\n\r\n  draw = () => {\r\n    const w = this.canvasNode.width;\r\n    const h = this.canvasNode.height;\r\n\r\n    this.canvasContext!.fillStyle = \"white\";\r\n    this.canvasContext!.fillRect(0, 0, w, h);\r\n    const ctx = this.canvasContext;\r\n    ctx!.translate(0.5, 0.5);\r\n    ctx!.beginPath();\r\n\r\n    const gridSpacing = 40;\r\n    const gridSpacingBigger = 5*gridSpacing;\r\n\r\n    for (let x = w/2,i=x; x <= w; x += gridSpacing,i-=gridSpacing) {\r\n      for (let y = h/2,j=y; y <= h; y += gridSpacing,j-=gridSpacing) {\r\n        ctx!.moveTo(x, 0);\r\n        ctx!.lineTo(x, h);\r\n        ctx!.moveTo(i, 0);\r\n        ctx!.lineTo(i, h);\r\n        ctx!.moveTo(0, y);\r\n        ctx!.lineTo(w, y);\r\n        ctx!.moveTo(0, j);\r\n        ctx!.lineTo(w, j);\r\n      }\r\n    }\r\n    ctx!.lineWidth = 1;\r\n    ctx!.strokeStyle = 'rgb(189,189,189)';\r\n    ctx!.stroke();\r\n    ctx!.beginPath();\r\n    ctx!.translate(0.5, 0.5);\r\n    ctx!.lineWidth = 2;\r\n    ctx!.strokeStyle = 'rgb(170,170,170)';\r\n\r\n    for (let x = w/2,i=x; x <= w; x += gridSpacingBigger,i-=gridSpacingBigger) {\r\n      for (let y = h/2,j=y; y <= h; y += gridSpacingBigger,j-=gridSpacingBigger) {\r\n        ctx!.moveTo(x, 0);\r\n        ctx!.lineTo(x, h);\r\n        ctx!.moveTo(i, 0);\r\n        ctx!.lineTo(i, h);\r\n        ctx!.moveTo(0, y);\r\n        ctx!.lineTo(w, y);\r\n        ctx!.moveTo(0, j);\r\n        ctx!.lineTo(w, j);\r\n      }\r\n    }\r\n    ctx!.stroke();\r\n  };\r\n\r\n  resizeBackgroundHandle = () =>{\r\n    this.resizeHandle();\r\n    this.draw();\r\n  }\r\n}\r\n","import {MainCanvas} from \"./models/Canvases/MainCanvas\";\r\nimport {CanvasSettings} from \"./models/Canvases/CanvasSettings\";\r\nimport {CanvasBackground} from \"./models/Canvases/CanvasBackground\";\r\n\r\nexport class DrawitCanvas {\r\n  private mainCanvas: MainCanvas;\r\n  private mainAppHolder: HTMLElement;\r\n  private canvasSettings: CanvasSettings;\r\n  private canvasBackground: CanvasBackground;\r\n\r\n  constructor(mainAppHolder: HTMLElement) {\r\n    this.mainAppHolder = mainAppHolder;\r\n    this.canvasSettings = new CanvasSettings(mainAppHolder);\r\n    this.canvasBackground = new CanvasBackground(mainAppHolder,0.95);\r\n    this.canvasBackground.draw();\r\n    this.mainCanvas = new MainCanvas(mainAppHolder, this.canvasSettings,0.95);\r\n    window.onresize = () =>{\r\n      this.mainCanvas.resizeHandle();\r\n      this.canvasBackground.resizeBackgroundHandle();\r\n    }\r\n  }\r\n}\r\n"]}