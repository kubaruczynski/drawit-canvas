{"mappings":"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","sources":["src/shaders/shaderUtils.ts","src/models/Vectors/Vec3.ts","src/models/Objects/Polyline.ts","src/models/Canvases/MainCanvas.ts","src/models/Canvases/WebGLCanvas.ts","src/shaders/vert.glsl","src/shaders/frag.glsl","src/models/Settings/Canvas.ts","src/models/Settings/ColorSelectionCanvas.ts","src/models/Settings/HueSelectionCanvas.ts","src/models/Settings/CanvasSettingsBox.ts","src/models/Canvases/CanvasSettings.ts","src/testingonly.ts","src/index.ts"],"sourcesContent":["//TODO: types?\r\nexport function createShader(gl:any, type:any, source:any) {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (success) {\r\n        return shader;\r\n    }\r\n    gl.deleteShader(shader);\r\n}\r\n//TODO: types?\r\nexport function createProgram(gl:any, vertexShader:any, fragmentShader:any) {\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (success) {\r\n        return program;\r\n    }\r\n    gl.deleteProgram(program);\r\n}\r\n","export class Vec3 {\r\n  constructor(x = 0, y = x, z = y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n  get y() {\r\n    return this[1];\r\n  }\r\n  get z() {\r\n    return this[2];\r\n  }\r\n  set x(i: number) {\r\n    this[0] = i;\r\n  }\r\n  set y(i: number) {\r\n    this[1] = i;\r\n  }\r\n  set z(i: number) {\r\n    this[2] = i;\r\n  }\r\n\r\n  set(x: number, y: number, z: number) {\r\n    this[0] = x;\r\n    this[1] = y;\r\n    this[2] = z;\r\n    return this;\r\n  }\r\n\r\n  copy() {\r\n    return new Vec3(this.x, this.y, this.z);\r\n  }\r\n\r\n  add(v: Vec3) {\r\n    return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n  }\r\n\r\n  sub(v: Vec3) {\r\n    return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n  }\r\n\r\n  scale(k: number) {\r\n    return new Vec3(this.x * k, this.y * k, this.z * k);\r\n  }\r\n\r\n  dot(v: Vec3) {\r\n    return this.x * v.x + this.y * v.y + this.z * v.z;\r\n  }\r\n\r\n  cross(v: Vec3) {\r\n    return new Vec3(\r\n      this.y * v.z - this.z * v.y,\r\n      this.z * v.x - this.x * v.z,\r\n      this.x * v.y - this.y * v.x\r\n    );\r\n  }\r\n\r\n  negate() {\r\n    return new Vec3(this.x * -1, this.y * -1, this.z * -1);\r\n  }\r\n\r\n  len() {\r\n    return Math.sqrt(this.x**2 + this.y**2 + this.z**2);\r\n  }\r\n\r\n  normalize() {\r\n    const len = this.len();\r\n    return new Vec3(this.x/len,this.y/len,this.z/len);\r\n  }\r\n\r\n  lerp(v, t) {\r\n    this.x = this.x + t * (v.x - this.x);\r\n    this.y = this.y + t * (v.y - this.y);\r\n    this.z = this.z + t * (v.z - this.z);\r\n  }\r\n\r\n  toArray(a: Float32Array,i=0) {\r\n    a[i] = this.x;\r\n    a[i+1] = this.y;\r\n    a[i+2] = this.z;\r\n    return a;\r\n  }\r\n}\r\n","import {Vec3} from \"../Vectors/Vec3\";\r\n\r\nexport class Polyline {\r\n    public points: Vec3[];\r\n    private count: number;\r\n\r\n    readonly position: Float32Array;\r\n    readonly next: Float32Array;\r\n    readonly prev: Float32Array;\r\n\r\n    readonly index: Uint16Array;\r\n    readonly side: Float32Array;\r\n    readonly uv: Float32Array;\r\n\r\n    constructor(points: Vec3[]) {\r\n        this.points = points;\r\n        this.count = points.length;\r\n        this.position = new Float32Array(this.count * 3 *2);\r\n        this.prev = new Float32Array(this.count * 3 *2);\r\n        this.next = new Float32Array(this.count * 3 *2);\r\n\r\n        this.index = new Uint16Array((this.count - 1) * 3 * 2);\r\n        this.side = new Float32Array(this.count * 2);\r\n        this.uv = new Float32Array(this.count * 2 * 2);\r\n\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.side.set([-1, 1], i * 2);\r\n            const v = i / (this.count - 1);\r\n            this.uv.set([0, v, 1, v], i * 4);\r\n            if (i === this.count - 1) continue;\r\n            const ind = i * 2;\r\n            this.index.set([ind, ind + 1, ind + 2], ind * 3);\r\n            this.index.set([ind + 2, ind + 1, ind + 3], (ind + 1) * 3);\r\n        }\r\n\r\n        this.updateGeometry();\r\n    }\r\n\r\n    private tmp: Vec3 = new Vec3();\r\n\r\n    updateGeometry() {\r\n        this.points.forEach((p, i) => {\r\n            p.toArray(this.position, i * 3 * 2);\r\n            p.toArray(this.position, i * 3 * 2 + 3);\r\n            if (!i) {\r\n                this.tmp = p.copy().sub(this.points[i + 1]).add(p);\r\n                this.tmp.toArray(this.prev, i * 3 * 2);\r\n                this.tmp.toArray(this.prev, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.next, (i - 1) * 3 * 2);\r\n                p.toArray(this.next, (i - 1) * 3 * 2 + 3);\r\n            }\r\n            if (i === this.points.length - 1) {\r\n                this.tmp = p.copy().sub(this.points[i - 1]).add(p);\r\n                this.tmp.toArray(this.next, i * 3 * 2);\r\n                this.tmp.toArray(this.next, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.prev, (i + 1) * 3 * 2);\r\n                p.toArray(this.prev, (i + 1) * 3 * 2 + 3);\r\n            }\r\n        });\r\n    }\r\n\r\n    stackNewPoint(v: Vec3){\r\n        this.points.push(v);\r\n        this.points.shift();\r\n        this.updateGeometry();\r\n    }\r\n}\r\n","import {CanvasSettingsBox} from \"../Settings/CanvasSettingsBox\";\r\nimport {WebGLCanvas} from \"./WebGLCanvas\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\nimport {Vec3} from \"../Vectors/Vec3\";\r\nimport {Polyline} from \"../Objects/Polyline\";\r\n\r\nexport class MainCanvas extends WebGLCanvas {\r\n  private mouse: Vec3 = new Vec3();\r\n  private tmp = new Vec3();\r\n  private mouseVelocity: Vec3 = new Vec3();\r\n\r\n  constructor(canvasHolder: HTMLElement, settings: CanvasSettings, sizeMultiplier?:number, width?: number, height?: number) {\r\n    super(canvasHolder,'main-canvas',settings,sizeMultiplier, width, height);\r\n    canvasHolder.addEventListener(\"mousemove\",this.drawCursor);\r\n    canvasHolder.addEventListener(\"touchmove\",this.drawCursor);\r\n    this.draw()\r\n  }\r\n\r\n  private drawCursor = (e) => {\r\n    const x = e.clientX;\r\n    const y = e.clientY;\r\n    this.mouse.x = (x/this.canvasNode.width)*2 -1;\r\n    this.mouse.y = (y/this.canvasNode.height)*-2+1;\r\n  };\r\n\r\n\r\n  draw() {\r\n    this.updateBuffersAndDraw();\r\n    for (let i = this.polyline.points.length - 1; i >= 0; i--) {\r\n      if (!i) {\r\n        this.tmp = this.mouse.copy();\r\n        this.tmp = this.tmp.sub(this.polyline.points[i]);\r\n        this.tmp = this.tmp.scale(this.canvasSettings.spring);\r\n        this.mouseVelocity = this.mouseVelocity.add(this.tmp);\r\n        this.mouseVelocity = this.mouseVelocity.scale(this.canvasSettings.friction);\r\n        this.polyline.points[i] = this.polyline.points[i].add(this.mouseVelocity);\r\n      } else {\r\n        this.polyline.points[i].lerp(this.polyline.points[i - 1], this.canvasSettings.time);\r\n      }\r\n    }\r\n\r\n    this.polyline.updateGeometry();\r\n\r\n    requestAnimationFrame(()=>this.draw());\r\n  }\r\n\r\n}\r\n","// @ts-ignore\r\nimport vert from '../../shaders/vert.glsl';\r\n// @ts-ignore\r\nimport frag from '../../shaders/frag.glsl';\r\nimport {createProgram, createShader} from \"../../shaders/shaderUtils\";\r\nimport {Vec3} from \"../Vectors/Vec3\";\r\nimport {Polyline} from \"../Objects/Polyline\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\n\r\nexport abstract class WebGLCanvas {\r\n  protected canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: WebGLRenderingContext;\r\n  private sizeMultiplier: number;\r\n  private vertexShader: WebGLShader;\r\n  private fragmentShader: WebGLShader;\r\n  private webGLProgram: WebGLProgram;\r\n  protected canvasSettings: CanvasSettings;\r\n\r\n\r\n  private prev_positionBuffer;\r\n  private next_positionBuffer;\r\n  private positionBuffer;\r\n  private sideBuffer;\r\n  private uvBuffer;\r\n\r\n  protected polyline: Polyline;\r\n\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    settings: CanvasSettings,\r\n    sizeMultiplier?: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.canvasSettings = settings;\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"webgl\", {preserveDrawingBuffer:false});\r\n    //this.primitiveType = this.canvasContext.TRIANGLES;\r\n    //this.primitiveType = this.canvasContext.LINES;\r\n    //this.primitiveType = this.canvasContext.TRIANGLE_STRIP;\r\n    this.webGLShadersInitialize();\r\n  }\r\n\r\n  webGLShadersInitialize = () => {\r\n    this.vertexShader = createShader(this.canvasContext,this.canvasContext.VERTEX_SHADER,vert);\r\n    this.fragmentShader = createShader(this.canvasContext,this.canvasContext.FRAGMENT_SHADER,frag);\r\n    this.webGLProgram = createProgram(this.canvasContext,this.vertexShader,this.fragmentShader);\r\n    this.canvasContext.enable(this.canvasContext.DEPTH_TEST);\r\n    this.canvasContext.useProgram(this.webGLProgram);\r\n\r\n    const prev_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"prev_position\");\r\n    const positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"position\");\r\n    const next_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"next_position\");\r\n    const sideAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"side\");\r\n    const uvAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"uv\");\r\n\r\n    this.prev_positionBuffer = this.canvasContext.createBuffer();\r\n    this.next_positionBuffer = this.canvasContext.createBuffer();\r\n    this.positionBuffer = this.canvasContext.createBuffer();\r\n    this.sideBuffer = this.canvasContext.createBuffer();\r\n    this.uvBuffer = this.canvasContext.createBuffer();\r\n\r\n    const colorUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_color\");\r\n    this.canvasContext.uniform4f(colorUniformLocation, Math.random(), Math.random(), Math.random(), 1);\r\n    //this.canvasContext.uniform4f(colorUniformLocation, 255, 0, 0, 1);\r\n\r\n    const resolutionUniformLocation  = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_resolution\");\r\n\r\n\r\n    const widthUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"width\");\r\n    this.canvasContext.uniform1f(widthUniformLocation, 0.01);\r\n\r\n    this.canvasContext.viewport(0,0,this.canvasNode.width,this.canvasNode.height);\r\n    this.canvasContext.clearColor(0,0,0,0);\r\n    this.canvasContext.clear(this.canvasContext.COLOR_BUFFER_BIT | this.canvasContext.DEPTH_BUFFER_BIT);\r\n    this.canvasContext.uniform2f(resolutionUniformLocation,this.canvasNode.width,this.canvasNode.height);\r\n    const size = 3;          // 2 components per iteration\r\n    const type = this.canvasContext.FLOAT;   // the data is 32bit floats\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    const offset = 0;        // start at the beginning of the buffer\r\n\r\n    const count = 20;\r\n    const points: Vec3[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const x = 0;\r\n      const y = 0;\r\n      const z = 0;\r\n      points.push(new Vec3(x,y,z));\r\n    };\r\n\r\n    this.polyline = new Polyline(points);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(prev_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(prev_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(next_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(next_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(sideAttributeLocation, 1, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(sideAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(uvAttributeLocation, 2, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(uvAttributeLocation);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,1);\r\n\r\n  };\r\n\r\n\r\n  updateBuffersAndDraw(){\r\n\r\n    const widthUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"width\");\r\n    this.canvasContext.uniform1f(widthUniformLocation, this.canvasSettings.pencilWidth);\r\n\r\n    const colorUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_color\");\r\n    this.canvasContext.uniform4f(colorUniformLocation, this.canvasSettings.colorInRGB.r, this.canvasSettings.colorInRGB.g, this.canvasSettings.colorInRGB.b, this.canvasSettings.colorInRGB.a);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,40);\r\n  }\r\n\r\n\r\n  resizeHandle = () => {\r\n    const displayWidth  = this.canvasHolder.clientWidth;\r\n    const displayHeight = this.canvasHolder.clientHeight;\r\n\r\n    if (this.canvasNode.width  != displayWidth ||\r\n        this.canvasNode.height != displayHeight) {\r\n\r\n      this.canvasNode.width  = displayWidth;\r\n      this.canvasNode.height = displayHeight;\r\n    }\r\n    const resolutionUniformLocation  = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_resolution\");\r\n    this.canvasContext.viewport(0,0,this.canvasNode.width,this.canvasNode.height);\r\n    this.canvasContext.uniform2f(resolutionUniformLocation,this.canvasNode.width,this.canvasNode.height);\r\n\r\n  };\r\n}\r\n","attribute vec3 prev_position;\r\nattribute vec3 position;\r\nattribute vec3 next_position;\r\nattribute float side;\r\nattribute vec2 uv;\r\n\r\nuniform vec2 u_resolution;\r\nuniform float width;\r\n\r\nvoid main() {\r\n    //ratio wyświetlania\r\n    vec2 aspect = vec2(u_resolution.x / u_resolution.y, 1);\r\n    //przeliczanie z -1,1 na pixele\r\n    vec2 nextScreen = next_position.xy * aspect;\r\n    vec2 prevScreen = prev_position.xy * aspect;\r\n    //tg do wyliczenia punktu po środku\r\n    vec2 tangent = normalize(nextScreen - prevScreen);\r\n    //odwrócamy vector\r\n    vec2 normal = vec2(-tangent.y, tangent.x);\r\n    //dzielimy przez aspect, żeby wrócić do -1,1\r\n    normal /= aspect;\r\n    //10% ekranu, bo o -1,1;\r\n    //normal *= 0.1;\r\n    normal *= (1.0 - pow(abs(uv.y - 0.5) * 2.0, 2.0)) * width;\r\n    float dist = length(nextScreen - prevScreen);\r\n    normal *= smoothstep(0.0, 0.05, dist);\r\n\r\n    vec4 current = vec4(position,1);\r\n    current.xy -= normal * side;\r\n\r\n    gl_Position = current;\r\n}\r\n","precision mediump float;\r\n\r\nuniform vec4 u_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = u_color;\r\n}\r\n","export abstract class Canvas {\r\n  private enabled: boolean = true;\r\n  private canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: CanvasRenderingContext2D | null;\r\n  private sizeMultiplier: number;\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    sizeMultiplier: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"2d\");\r\n  }\r\n\r\n  resizeHandle = () => {\r\n    const currentImage = this.canvasContext!.getImageData(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.canvasNode.width = this.canvasHolder.clientWidth * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n    this.canvasNode.height = this.canvasHolder.clientHeight * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n\r\n    this.canvasContext!.putImageData(currentImage,0,0);\r\n  };\r\n\r\n  abstract draw() : void;\r\n\r\n  clear = () => {\r\n    this.canvasContext!.fillStyle = \"rgba(0,0,0,0)\";\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\nimport {RGBA} from \"../Types/Rgba\";\r\n\r\nexport class ColorSelectionCanvas extends Canvas {\r\n  private selectedColor: string = \"rgba(255,0,0,1)\";\r\n  private drawingColor: string = \"rgba(255,0,0,1)\";\r\n  private selectedColorAsRGBAObject: RGBA = { r: 255, g: 0, b: 0, a: 255 };\r\n  private isDragging: boolean = false;\r\n  private onColorSelect: (RGBA)=>void;\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    onColorSelect: (RGBA)=>void,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    super(canvasHolder,'color-selection-canvas',1, width, height);\r\n    this.onColorSelect = onColorSelect;\r\n    this.canvasNode.addEventListener(\"click\", e => this.changeColor(e));\r\n    this.canvasNode.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.changeColor(e);\r\n    });\r\n    this.canvasNode.addEventListener(\"mouseup\", e => {\r\n      this.isDragging = false;\r\n    });\r\n    this.canvasNode.addEventListener(\"mousemove\", e => {\r\n      if (this.isDragging) {\r\n        this.changeColor(e);\r\n      }\r\n    });\r\n    this.draw();\r\n  }\r\n\r\n  rgbatohsla = (r:number, g:number, b:number, a:number) => {\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n    if (delta == 0) h = 0;\r\n    else if (cmax == r) h = ((g - b) / delta) % 6;\r\n    else if (cmax == g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n    h = Math.round(h * 60);\r\n    if (h < 0) h += 360;\r\n    l = (cmax + cmin) / 2;\r\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n    //return \"hsla(\" + h + \",\" + s + \"%,\" +l + \"%,\" + a + \")\";\r\n    return { h, s, l, a };\r\n  };\r\n\r\n  hslatorgba = (h:number,s:number,l:number, a:number) => {\r\n    s /= 100;\r\n    l /= 100;\r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n        m = l - c/2,\r\n        r = 0,\r\n        g = 0,\r\n        b = 0;\r\n    if (0 <= h && h < 60) {\r\n      r = c; g = x; b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x; g = c; b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0; g = c; b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0; g = x; b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x; g = 0; b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c; g = 0; b = x;\r\n    }\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n    return {r,g,b,a};\r\n  };\r\n\r\n  setNewHue = (hue: number) => {\r\n    const hsla = this.rgbatohsla(\r\n      this.selectedColorAsRGBAObject.r,\r\n      this.selectedColorAsRGBAObject.g,\r\n      this.selectedColorAsRGBAObject.b,\r\n      this.selectedColorAsRGBAObject.a\r\n    );\r\n    const rgbaSelected = this.hslatorgba(hue,100,50,hsla.a);\r\n    const rgbaDrawing = this.hslatorgba(hue,hsla.s,hsla.l,hsla.a);\r\n    this.selectedColor = \"rgba(\" + rgbaSelected.r + \",\" + rgbaSelected.g + \",\" + rgbaSelected.b + \",\" + rgbaSelected.a + \")\";\r\n    this.drawingColor = \"rgba(\" + rgbaDrawing.r + \",\" + rgbaDrawing.g + \",\" + rgbaDrawing.b + \",\" + rgbaDrawing.a + \")\";\r\n    this.selectedColorAsRGBAObject = rgbaSelected;\r\n    this.onColorSelect(this.selectedColorAsRGBAObject);\r\n    this.draw();\r\n  };\r\n\r\n  changeColor = (e: MouseEvent) => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n    this.drawingColor =\r\n      \"rgba(\" + imageData[0] + \",\" + imageData[1] + \",\" + imageData[2] + \",1)\";\r\n    this.selectedColorAsRGBAObject = {\r\n      r: imageData[0],\r\n      g: imageData[1],\r\n      b: imageData[2],\r\n      a: imageData[3]\r\n    };\r\n    this.onColorSelect(this.selectedColorAsRGBAObject);\r\n    this.draw();\r\n  };\r\n\r\n  drawGradientsOnColorSelectionCanvas = () => {\r\n    const grdWhite = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      0\r\n    );\r\n    grdWhite.addColorStop(0, \"rgba(255,255,255,1)\");\r\n    grdWhite.addColorStop(1, \"rgba(255,255,255,0)\");\r\n    this.canvasContext!.fillStyle = grdWhite;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n\r\n    const grdBlack = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      0,\r\n      this.canvasNode.height\r\n    );\r\n    grdBlack.addColorStop(0, \"rgba(0,0,0,0)\");\r\n    grdBlack.addColorStop(1, \"rgba(0,0,0,1)\");\r\n    this.canvasContext!.fillStyle = grdBlack;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n\r\n  draw = () => {\r\n    this.canvasContext!.fillStyle = this.selectedColor;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.drawGradientsOnColorSelectionCanvas();\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\n\r\nexport class HueSelectionCanvas extends Canvas {\r\n    private selectedHue: string = \"rgba(0,0,0,1)\";\r\n    private isDragging: boolean = false;\r\n    private onHueSelect: (hue:number) => any;\r\n\r\n    constructor(\r\n        canvasHolder: HTMLElement,\r\n        onHueSelect: (hue: number) => any,\r\n        width?: number,\r\n        height?: number\r\n    ) {\r\n        super(canvasHolder,'hue-selection-canvas',1, width, height);\r\n        this.onHueSelect = onHueSelect;\r\n        this.canvasNode.addEventListener(\"click\", this.changeHue);\r\n        this.canvasNode.addEventListener(\"mousedown\", e => {\r\n            this.isDragging = true;\r\n            this.changeHue(e);\r\n        });\r\n        this.canvasNode.addEventListener(\"mouseup\", e => {\r\n            this.isDragging = false;\r\n        });\r\n        this.canvasNode.addEventListener(\"mousemove\", e => {\r\n            if (this.isDragging) {\r\n                this.changeHue(e);\r\n            }\r\n        });\r\n        this.draw();\r\n    }\r\n\r\n    changeHue = (e: MouseEvent) => {\r\n        const x = e.offsetX;\r\n        const y = e.offsetY;\r\n        const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n        const hue = this.getHueFromRGB(imageData[0],imageData[1],imageData[2]);\r\n        this.onHueSelect(hue);\r\n    };\r\n\r\n    getHueFromRGB = (r:number, g:number, b:number) => {\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0\r\n        if (delta == 0) h = 0;\r\n        else if (cmax == r) h = ((g - b) / delta) % 6;\r\n        else if (cmax == g) h = (b - r) / delta + 2;\r\n        else h = (r - g) / delta + 4;\r\n        h = Math.round(h * 60);\r\n        if (h < 0) h += 360;\r\n        return h\r\n    };\r\n\r\n    draw = () => {\r\n        this.canvasContext!.rect(\r\n            0,\r\n            0,\r\n            this.canvasNode.width,\r\n            this.canvasNode.height\r\n        );\r\n        const grd1 = this.canvasContext!.createLinearGradient(\r\n            0,\r\n            0,\r\n            0,\r\n            this.canvasNode.height\r\n        );\r\n        grd1.addColorStop(0, \"rgba(255, 0, 0, 1)\");\r\n        grd1.addColorStop(0.17, \"rgba(255, 255, 0, 1)\");\r\n        grd1.addColorStop(0.34, \"rgba(0, 255, 0, 1)\");\r\n        grd1.addColorStop(0.51, \"rgba(0, 255, 255, 1)\");\r\n        grd1.addColorStop(0.68, \"rgba(0, 0, 255, 1)\");\r\n        grd1.addColorStop(0.85, \"rgba(255, 0, 255, 1)\");\r\n        grd1.addColorStop(1, \"rgba(255, 0, 0, 1)\");\r\n        this.canvasContext!.fillStyle = grd1;\r\n        this.canvasContext!.fill();\r\n    };\r\n}\r\n","import { ColorSelectionCanvas } from \"./ColorSelectionCanvas\";\r\nimport { HueSelectionCanvas } from \"./HueSelectionCanvas\";\r\nimport {RGBA} from \"../Types/Rgba\";\r\nimport {CanvasSettings} from \"../Canvases/CanvasSettings\";\r\n\r\nexport class CanvasSettingsBox {\r\n  currentColor: string = \"#C3C3C3\";\r\n  private colorDisplay: HTMLElement;\r\n  private colorPicker: ColorSelectionCanvas;\r\n  private huePicker: HueSelectionCanvas;\r\n  private sizePicker: HTMLElement;\r\n  colorInHex: string;\r\n  private settings: CanvasSettings;\r\n\r\n  constructor(mainAppHolder: HTMLElement, canvasSettings: CanvasSettings) {\r\n    this.settings = canvasSettings;\r\n\r\n    const settingsHolder = document.createElement(\"div\");\r\n    settingsHolder.id = \"settings-holder\";\r\n    mainAppHolder.appendChild(settingsHolder);\r\n\r\n\r\n\r\n    const slidersHolder = document.createElement(\"div\");\r\n    slidersHolder.id = \"sliders-holder\";\r\n    settingsHolder.appendChild(slidersHolder);\r\n\r\n    const sizePicker = document.createElement(\"input\");\r\n    sizePicker.type = \"range\";\r\n    sizePicker.min = \"1\";\r\n    sizePicker.max=\"100\";\r\n    sizePicker.value = \"10\";\r\n    sizePicker.oninput = (e:Event) => {\r\n      this.settings.pencilWidth = Number((e.target as HTMLInputElement).value);\r\n    }\r\n    sizePicker.id = \"pencil-size-picker\";\r\n    slidersHolder.appendChild(sizePicker);\r\n    this.sizePicker = sizePicker;\r\n\r\n    const springPicker = document.createElement(\"input\");\r\n    springPicker.type = \"range\";\r\n    springPicker.min = \"1\";\r\n    springPicker.max=\"10\";\r\n    springPicker.value = \"5\";\r\n    springPicker.oninput = (e:Event) => {\r\n      this.settings.spring = Number((e.target as HTMLInputElement).value);\r\n    }\r\n    springPicker.id = \"pencil-size-picker\";\r\n    slidersHolder.appendChild(springPicker);\r\n\r\n\r\n    const frictionPicker = document.createElement(\"input\");\r\n    frictionPicker.type = \"range\";\r\n    frictionPicker.min = \"90\";\r\n    frictionPicker.max=\"100\";\r\n    frictionPicker.value = \"92\";\r\n    frictionPicker.oninput = (e:Event) => {\r\n      this.settings.friction = Number((e.target as HTMLInputElement).value);\r\n    }\r\n    frictionPicker.id = \"pencil-size-picker\";\r\n    slidersHolder.appendChild(frictionPicker);\r\n\r\n    const colorSelectionWrapper = document.createElement(\"div\");\r\n    colorSelectionWrapper.id = \"color-selection-wrapper\";\r\n    settingsHolder.appendChild(colorSelectionWrapper);\r\n\r\n    const hueSelectionWrapper = document.createElement(\"div\");\r\n    hueSelectionWrapper.id = \"hue-selection-wrapper\";\r\n    settingsHolder.appendChild(hueSelectionWrapper);\r\n\r\n    this.colorPicker = new ColorSelectionCanvas(\r\n      colorSelectionWrapper,\r\n        (color)=>{\r\n        this.settings.colorInRGB = color\r\n        },\r\n    );\r\n    this.huePicker = new HueSelectionCanvas(\r\n      hueSelectionWrapper,\r\n      this.colorPicker.setNewHue\r\n    );\r\n    this.settings.pencilWidth\r\n  }\r\n\r\n}\r\n","import {RGBA} from \"../Types/Rgba\";\r\n\r\nexport class CanvasSettings {\r\n    private _pencilWidth: number = 0.005;\r\n    private _colorInRGB: RGBA = {r: 0, g: 0, b: 0, a: 1};\r\n    private _spring: number = 0.05;\r\n    private _friction: number = 0.92;\r\n    private _time: number = 0.6;\r\n\r\n    public get pencilWidth() {\r\n        return this._pencilWidth\r\n    };\r\n\r\n    public get colorInRGB() {\r\n        return this._colorInRGB\r\n    };\r\n\r\n    public get spring() {\r\n        return this._spring\r\n    };\r\n\r\n    public get friction() {\r\n        return this._friction\r\n    };\r\n\r\n    public get time() {\r\n        return this._time\r\n    };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public set colorInRGB(rgba: RGBA) {\r\n        this._colorInRGB = {\r\n            r: rgba.r / 255,\r\n            g: rgba.g / 255,\r\n            b: rgba.b / 255,\r\n            a: rgba.a / 255,\r\n        };\r\n    };\r\n\r\n    public set pencilWidth(size: number) {\r\n        this._pencilWidth = Number(size / 1000);\r\n    }\r\n\r\n    public set spring(spring: number) {\r\n        this._spring = Number(spring/100);\r\n    }\r\n\r\n    public set friction(friction: number) {\r\n        this._friction = Number(friction/100);\r\n    }\r\n\r\n    public set time(time: number) {\r\n        this._time = time;\r\n    }\r\n}\r\n","import {DrawitCanvas} from \"./index\";\r\nimport './styles/normalize.css';\r\nimport './styles/index.css';\r\n\r\nconst app = document.getElementById(\"app\");\r\n\r\n// @ts-ignore\r\ndocument.canvas = new DrawitCanvas(app!);\r\n","import {MainCanvas} from \"./models/Canvases/MainCanvas\";\r\nimport {CanvasSettingsBox} from \"./models/Settings/CanvasSettingsBox\";\r\nimport {CanvasBackground} from \"./models/Canvases/CanvasBackground\";\r\nimport {CanvasSettings} from \"./models/Canvases/CanvasSettings\";\r\n\r\nexport class DrawitCanvas {\r\n\r\n  public mainCanvas: MainCanvas;\r\n\r\n  private mainAppHolder: HTMLElement;\r\n  private canvasSettings: CanvasSettings;\r\n  private canvasSettingsBox: CanvasSettingsBox;\r\n  private canvasBackground: CanvasBackground;\r\n\r\n  constructor(mainAppHolder: HTMLElement) {\r\n    this.mainAppHolder = mainAppHolder;\r\n    //this.canvasBackground = new CanvasBackground(mainAppHolder,0.95);\r\n    this.canvasSettings=new CanvasSettings();\r\n    this.canvasSettingsBox = new CanvasSettingsBox(mainAppHolder, this.canvasSettings);\r\n    //this.canvasBackground.draw();\r\n    this.mainCanvas = new MainCanvas(mainAppHolder, this.canvasSettings,1);\r\n    window.onresize = () =>{\r\n      this.mainCanvas.resizeHandle();\r\n      //this.canvasBackground.resizeBackgroundHandle();\r\n    }\r\n  }\r\n}\r\n"],"names":["$4a9366caa3dab2fb$export$1750aa77609e1fb","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader","$ab8536f7affa8810$export$838423f3adec30fa","x","y","z","this","i","set","copy","add","v","sub","scale","k","dot","cross","negate","len","Math","sqrt","normalize","lerp","t","toArray","a","$c193b12f15f1cc97$export$79f3ee03e63e7073","points","tmp","count","length","position","Float32Array","prev","next","index","Uint16Array","side","uv","ind","updateGeometry","forEach","p","stackNewPoint","push","shift","$f581a51df8471949$export$dfbdc2fae74a53f4","canvasHolder","id","settings","sizeMultiplier","width","height","createCanvas","canvas","document","createElement","webGLShadersInitialize","vertexShader","canvasContext","VERTEX_SHADER","$parcel$interopDefault","fragmentShader","FRAGMENT_SHADER","webGLProgram","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","$4a9366caa3dab2fb$export$327d24a04cd0dc17","enable","DEPTH_TEST","useProgram","prev_positionAttributeLocation","getAttribLocation","positionAttributeLocation","next_positionAttributeLocation","sideAttributeLocation","uvAttributeLocation","prev_positionBuffer","createBuffer","next_positionBuffer","positionBuffer","sideBuffer","uvBuffer","colorUniformLocation","getUniformLocation","uniform4f","random","resolutionUniformLocation","widthUniformLocation","uniform1f","viewport","canvasNode","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","uniform2f","FLOAT","polyline","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","enableVertexAttribArray","drawArrays","TRIANGLE_STRIP","resizeHandle","displayWidth","clientWidth","displayHeight","clientHeight","canvasSettings","appendChild","getContext","preserveDrawingBuffer","updateBuffersAndDraw","pencilWidth","colorInRGB","r","g","b","super","mouse","mouseVelocity","drawCursor","e","clientX","clientY","addEventListener","draw","time","spring","friction","requestAnimationFrame","$b0fe2b49a76c28e6$export$8d01c972ee8b14a9","enabled","currentImage","getImageData","putImageData","fillStyle","fillRect","$b829db3e65f345b1$export$4f29201c4906e31b","onColorSelect","selectedColor","drawingColor","selectedColorAsRGBAObject","isDragging","rgbatohsla","cmin","min","cmax","max","delta","h","s","l","round","abs","toFixed","hslatorgba","c","m","setNewHue","hue","hsla","rgbaSelected","rgbaDrawing","changeColor","offsetX","offsetY","imageData","data","drawGradientsOnColorSelectionCanvas","grdWhite","createLinearGradient","addColorStop","grdBlack","$9eb3b8940d67e948$export$6bd9aca4e3ae3360","onHueSelect","selectedHue","changeHue","getHueFromRGB","rect","grd1","fill","$fb4d167fa0c51c05$export$e92d840fe25c5b8d","mainAppHolder","currentColor","settingsHolder","slidersHolder","sizePicker","value","oninput","Number","target","springPicker","frictionPicker","colorSelectionWrapper","hueSelectionWrapper","colorPicker","color","huePicker","$1f865a92ba87faab$export$4990dd4230500f6b","_pencilWidth","_colorInRGB","_spring","_friction","_time","rgba","size","$ae2133d7c4a7f796$var$app","getElementById","canvasSettingsBox","mainCanvas","window","onresize"],"version":3,"file":"index.3c4604ad.js.map"}