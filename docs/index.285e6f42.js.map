{"mappings":"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","sources":["src/shaders/shaderUtils.ts","src/models/Vectors/Vec3.ts","src/models/Objects/Polyline.ts","src/models/Canvases/MainCanvas.ts","src/models/Canvases/WebGLCanvas.ts","src/shaders/vert.glsl","src/shaders/frag.glsl","src/models/Canvases/Canvas.ts","src/models/Canvases/ColorSelectionCanvas.ts","src/models/Canvases/HueSelectionCanvas.ts","src/models/Canvases/CanvasSettings.ts","src/models/Canvases/CanvasBackground.ts","src/testingonly.ts","src/index.ts"],"sourcesContent":["//TODO: types?\r\nexport function createShader(gl:any, type:any, source:any) {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (success) {\r\n        return shader;\r\n    }\r\n    gl.deleteShader(shader);\r\n}\r\n//TODO: types?\r\nexport function createProgram(gl:any, vertexShader:any, fragmentShader:any) {\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (success) {\r\n        return program;\r\n    }\r\n    gl.deleteProgram(program);\r\n}\r\n","export class Vec3 {\r\n  constructor(x = 0, y = x, z = y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n  get y() {\r\n    return this[1];\r\n  }\r\n  get z() {\r\n    return this[2];\r\n  }\r\n  set x(i: number) {\r\n    this[0] = i;\r\n  }\r\n  set y(i: number) {\r\n    this[1] = i;\r\n  }\r\n  set z(i: number) {\r\n    this[2] = i;\r\n  }\r\n\r\n  set(x: number, y: number, z: number) {\r\n    this[0] = x;\r\n    this[1] = y;\r\n    this[2] = z;\r\n    return this;\r\n  }\r\n\r\n  copy() {\r\n    return new Vec3(this.x, this.y, this.z);\r\n  }\r\n\r\n  add(v: Vec3) {\r\n    return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);\r\n  }\r\n\r\n  sub(v: Vec3) {\r\n    return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);\r\n  }\r\n\r\n  scale(k: number) {\r\n    return new Vec3(this.x * k, this.y * k, this.z * k);\r\n  }\r\n\r\n  dot(v: Vec3) {\r\n    return this.x * v.x + this.y * v.y + this.z * v.z;\r\n  }\r\n\r\n  cross(v: Vec3) {\r\n    return new Vec3(\r\n      this.y * v.z - this.z * v.y,\r\n      this.z * v.x - this.x * v.z,\r\n      this.x * v.y - this.y * v.x\r\n    );\r\n  }\r\n\r\n  negate() {\r\n    return new Vec3(this.x * -1, this.y * -1, this.z * -1);\r\n  }\r\n\r\n  len() {\r\n    return Math.sqrt(this.x**2 + this.y**2 + this.z**2);\r\n  }\r\n\r\n  normalize() {\r\n    const len = this.len();\r\n    return new Vec3(this.x/len,this.y/len,this.z/len);\r\n  }\r\n\r\n  lerp(v, t) {\r\n    this.x = this.x + t * (v.x - this.x);\r\n    this.y = this.y + t * (v.y - this.y);\r\n    this.z = this.z + t * (v.z - this.z);\r\n  }\r\n\r\n  toArray(a: Float32Array,i=0) {\r\n    a[i] = this.x;\r\n    a[i+1] = this.y;\r\n    a[i+2] = this.z;\r\n    return a;\r\n  }\r\n}\r\n","import {Vec3} from \"../Vectors/Vec3\";\r\n\r\nexport class Polyline {\r\n    public points: Vec3[];\r\n    private count: number;\r\n\r\n    readonly position: Float32Array;\r\n    readonly next: Float32Array;\r\n    readonly prev: Float32Array;\r\n\r\n    readonly index: Uint16Array;\r\n    readonly side: Float32Array;\r\n    readonly uv: Float32Array;\r\n\r\n    constructor(points: Vec3[]) {\r\n        this.points = points;\r\n        this.count = points.length;\r\n        this.position = new Float32Array(this.count * 3 *2);\r\n        this.prev = new Float32Array(this.count * 3 *2);\r\n        this.next = new Float32Array(this.count * 3 *2);\r\n\r\n        this.index = new Uint16Array((this.count - 1) * 3 * 2);\r\n        this.side = new Float32Array(this.count * 2);\r\n        this.uv = new Float32Array(this.count * 2 * 2);\r\n\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.side.set([-1, 1], i * 2);\r\n            const v = i / (this.count - 1);\r\n            this.uv.set([0, v, 1, v], i * 4);\r\n            if (i === this.count - 1) continue;\r\n            const ind = i * 2;\r\n            this.index.set([ind, ind + 1, ind + 2], ind * 3);\r\n            this.index.set([ind + 2, ind + 1, ind + 3], (ind + 1) * 3);\r\n        }\r\n\r\n        this.updateGeometry();\r\n    }\r\n\r\n    private tmp: Vec3 = new Vec3();\r\n\r\n    updateGeometry() {\r\n        this.points.forEach((p, i) => {\r\n            p.toArray(this.position, i * 3 * 2);\r\n            p.toArray(this.position, i * 3 * 2 + 3);\r\n            if (!i) {\r\n                this.tmp = p.copy().sub(this.points[i + 1]).add(p);\r\n                this.tmp.toArray(this.prev, i * 3 * 2);\r\n                this.tmp.toArray(this.prev, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.next, (i - 1) * 3 * 2);\r\n                p.toArray(this.next, (i - 1) * 3 * 2 + 3);\r\n            }\r\n            if (i === this.points.length - 1) {\r\n                this.tmp = p.copy().sub(this.points[i - 1]).add(p);\r\n                this.tmp.toArray(this.next, i * 3 * 2);\r\n                this.tmp.toArray(this.next, i * 3 * 2 + 3);\r\n            } else {\r\n                p.toArray(this.prev, (i + 1) * 3 * 2);\r\n                p.toArray(this.prev, (i + 1) * 3 * 2 + 3);\r\n            }\r\n        });\r\n    }\r\n\r\n    stackNewPoint(v: Vec3){\r\n        this.points.push(v);\r\n        this.points.shift();\r\n        this.updateGeometry();\r\n    }\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\nimport {WebGLCanvas} from \"./WebGLCanvas\";\r\n\r\nexport class MainCanvas extends WebGLCanvas {\r\n  private isDrawing: boolean = false;\r\n  private mouseX: number = 0;\r\n  private mouseY: number = 0;\r\n  private settings: CanvasSettings;\r\n\r\n  constructor(canvasHolder: HTMLElement,settings: CanvasSettings,sizeMultiplier?:number, width?: number, height?: number) {\r\n    super(canvasHolder,'main-canvas',sizeMultiplier, width, height);\r\n    this.settings = settings;\r\n    this.canvasNode.addEventListener(\"mousedown\",this.startDrawing);\r\n    this.canvasNode.addEventListener(\"mouseup\",this.stopDrawing);\r\n    this.canvasNode.addEventListener(\"mousemove\",this.doDrawing);\r\n\r\n    this.canvasNode.addEventListener(\"touchstart\",this.startDrawing);\r\n    this.canvasNode.addEventListener(\"touchend\",this.stopDrawing);\r\n    this.canvasNode.addEventListener(\"touchmove\",this.doDrawing);\r\n\r\n\r\n    requestAnimationFrame(()=>this.draw());\r\n  }\r\n\r\n\r\n  startDrawing = (e: any) => {\r\n    this.isDrawing = true;\r\n    this.mouseX = e.offsetX;\r\n    this.mouseY = e.offsetY;\r\n  };\r\n\r\n  stopDrawing = () =>{\r\n    this.isDrawing = false;\r\n  };\r\n\r\n  doDrawing = (e: any) =>{\r\n        this.drawCursor(e);\r\n  };\r\n\r\n  /*draw = e => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    if (e.buttons !== 1) return;\r\n\r\n    this.canvasContext.beginPath(); // begin\r\n\r\n    this.canvasContext.lineWidth = this.settings.pencilWidth;\r\n    this.canvasContext.lineCap = \"round\";\r\n    this.canvasContext.strokeStyle = this.settings.currentColor;\r\n\r\n    this.canvasContext.moveTo(this.mouseX, this.mouseY); // from\r\n    this.canvasContext.lineTo(x, y); // to\r\n    this.mouseX = x;\r\n    this.mouseY = y;\r\n\r\n    this.canvasContext.stroke(); // draw it!\r\n  };*/\r\n}\r\n","// @ts-ignore\r\nimport vert from '../../shaders/vert.glsl';\r\n// @ts-ignore\r\nimport frag from '../../shaders/frag.glsl';\r\nimport {createProgram, createShader} from \"../../shaders/shaderUtils\";\r\nimport {Vec3} from \"../Vectors/Vec3\";\r\nimport {Polyline} from \"../Objects/Polyline\";\r\n\r\nexport abstract class WebGLCanvas {\r\n  private enabled: boolean = true;\r\n  private canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: WebGLRenderingContext;\r\n  private sizeMultiplier: number;\r\n  private vertexShader: WebGLShader;\r\n  private fragmentShader: WebGLShader;\r\n  private webGLProgram: WebGLProgram;\r\n  private primitiveType: GLenum;\r\n\r\n  private mouse: Vec3 = new Vec3();\r\n\r\n  private prev_positionBuffer;\r\n  private next_positionBuffer;\r\n  private positionBuffer;\r\n  private sideBuffer;\r\n  private uvBuffer;\r\n\r\n  private polyline: Polyline;\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    sizeMultiplier?: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"webgl\");\r\n    //this.primitiveType = this.canvasContext.TRIANGLES;\r\n    //this.primitiveType = this.canvasContext.LINES;\r\n    //this.primitiveType = this.canvasContext.TRIANGLE_STRIP;\r\n    this.webGLShadersInitialize();\r\n  }\r\n\r\n  webGLShadersInitialize = () => {\r\n    this.vertexShader = createShader(this.canvasContext,this.canvasContext.VERTEX_SHADER,vert);\r\n    this.fragmentShader = createShader(this.canvasContext,this.canvasContext.FRAGMENT_SHADER,frag);\r\n    this.webGLProgram = createProgram(this.canvasContext,this.vertexShader,this.fragmentShader);\r\n    this.canvasContext.enable(this.canvasContext.DEPTH_TEST);\r\n    this.canvasContext.useProgram(this.webGLProgram);\r\n\r\n    const prev_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"prev_position\");\r\n    const positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"position\");\r\n    const next_positionAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"next_position\");\r\n    const sideAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"side\");\r\n    const uvAttributeLocation = this.canvasContext.getAttribLocation(this.webGLProgram, \"uv\");\r\n\r\n    this.prev_positionBuffer = this.canvasContext.createBuffer();\r\n    this.next_positionBuffer = this.canvasContext.createBuffer();\r\n    this.positionBuffer = this.canvasContext.createBuffer();\r\n    this.sideBuffer = this.canvasContext.createBuffer();\r\n    this.uvBuffer = this.canvasContext.createBuffer();\r\n\r\n    const colorUniformLocation = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_color\");\r\n    this.canvasContext.uniform4f(colorUniformLocation, Math.random(), Math.random(), Math.random(), 1);\r\n    //this.canvasContext.uniform4f(colorUniformLocation, 255, 0, 0, 1);\r\n\r\n    const resolutionUniformLocation  = this.canvasContext.getUniformLocation(this.webGLProgram, \"u_resolution\");\r\n\r\n    this.resizeHandle();\r\n    this.canvasContext.viewport(0,0,this.canvasNode.width,this.canvasNode.height);\r\n    this.canvasContext.clearColor(0,0,0,0);\r\n    this.canvasContext.clear(this.canvasContext.COLOR_BUFFER_BIT | this.canvasContext.DEPTH_BUFFER_BIT);\r\n    this.canvasContext.uniform2f(resolutionUniformLocation,this.canvasNode.width,this.canvasNode.height);\r\n    const size = 3;          // 2 components per iteration\r\n    const type = this.canvasContext.FLOAT;   // the data is 32bit floats\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n    const offset = 0;        // start at the beginning of the buffer\r\n\r\n    const count = 20;\r\n    const points: Vec3[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const x = i / (count - 1) - 0.5;\r\n      const y = 0;\r\n      const z = 0;\r\n      points.push(new Vec3(x,y,z));\r\n    };\r\n\r\n    this.polyline = new Polyline(points);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(prev_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(prev_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(next_positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(next_positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(sideAttributeLocation, 1, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(sideAttributeLocation);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n    this.canvasContext.vertexAttribPointer(uvAttributeLocation, 2, type, normalize, stride, offset);\r\n    this.canvasContext.enableVertexAttribArray(uvAttributeLocation);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,40);\r\n\r\n  };\r\n\r\n  drawCursor = (e) => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    this.mouse.x = (x/this.canvasNode.width)*2 -1;\r\n    this.mouse.y = (y/this.canvasNode.height)*-2+1;\r\n  };\r\n\r\n  private spring = 0.05;\r\n  private friction = 0.93;\r\n  private tmp = new Vec3();\r\n  private mouseVelocity: Vec3 = new Vec3();\r\n\r\n  draw() {\r\n    this.updateBuffersAndDraw();\r\n\r\n    for (let i = this.polyline.points.length - 1; i >= 0; i--) {\r\n      if (!i) {\r\n        this.tmp = this.mouse.copy();\r\n        this.tmp = this.tmp.sub(this.polyline.points[i]);\r\n        this.tmp = this.tmp.scale(this.spring);\r\n        this.mouseVelocity = this.mouseVelocity.add(this.tmp);\r\n        this.mouseVelocity = this.mouseVelocity.scale(this.friction);\r\n        this.polyline.points[i] = this.polyline.points[i].add(this.mouseVelocity);\r\n      } else {\r\n        this.polyline.points[i].lerp(this.polyline.points[i - 1], 0.9);\r\n      }\r\n    }\r\n\r\n    this.polyline.updateGeometry();\r\n\r\n    requestAnimationFrame(()=>this.draw());\r\n  }\r\n\r\n  updateBuffersAndDraw(){\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.prev_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.prev, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.next_positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.next, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.positionBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.position, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.sideBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.side, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.bindBuffer(this.canvasContext.ARRAY_BUFFER,this.uvBuffer);\r\n    this.canvasContext.bufferData(this.canvasContext.ARRAY_BUFFER, this.polyline.uv, this.canvasContext.STATIC_DRAW);\r\n\r\n    this.canvasContext.drawArrays(this.canvasContext.TRIANGLE_STRIP,0,40);\r\n  }\r\n\r\n  resizeHandle = () => {\r\n      const displayWidth  = this.canvasNode.clientWidth;\r\n      const displayHeight = this.canvasNode.clientHeight;\r\n\r\n      if (this.canvasNode.width  != displayWidth ||\r\n          this.canvasNode.height != displayHeight) {\r\n\r\n        this.canvasNode.width  = displayWidth;\r\n        this.canvasNode.height = displayHeight;\r\n      }\r\n\r\n  };\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nattribute vec3 prev_position;\\nattribute vec3 position;\\nattribute vec3 next_position;\\nattribute float side;\\nattribute vec2 uv;\\n\\nuniform vec2 u_resolution;\\n\\nvoid main() {\\n    //ratio wyświetlania\\n    vec2 aspect = vec2(u_resolution.x / u_resolution.y, 1);\\n    //przeliczanie z -1,1 na pixele\\n    vec2 nextScreen = next_position.xy * aspect;\\n    vec2 prevScreen = prev_position.xy * aspect;\\n    //tg do wyliczenia punktu po środku\\n    vec2 tangent = normalize(nextScreen - prevScreen);\\n    //odwrócamy vector\\n    vec2 normal = vec2(-tangent.y, tangent.x);\\n    //dzielimy przez aspect, żeby wrócić do -1,1\\n    normal /= aspect;\\n    //10% ekranu, bo o -1,1;\\n    //normal *= 0.1;\\n    normal *= (1.0 - pow(abs(uv.y - 0.5) * 2.0, 2.0)) * 0.1;\\n    float dist = length(nextScreen - prevScreen);\\n    normal *= smoothstep(0.0, 0.05, dist);\\n\\n    vec4 current = vec4(position,1);\\n    current.xy -= normal * side;\\n\\n    gl_Position = current;\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec4 u_color;\\n\\nvoid main() {\\n    gl_FragColor = u_color;\\n}\\n\";","export abstract class Canvas {\r\n  private enabled: boolean = true;\r\n  private canvasHolder: HTMLElement;\r\n  protected canvasNode: HTMLCanvasElement;\r\n  protected canvasContext: CanvasRenderingContext2D | null;\r\n  private sizeMultiplier: number;\r\n\r\n  private createCanvas = (width: number, height: number) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  };\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    id: string,\r\n    sizeMultiplier: number,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    this.sizeMultiplier = sizeMultiplier;\r\n    this.canvasHolder = canvasHolder;\r\n    const canvas = this.createCanvas(\r\n      width\r\n        ? width\r\n        : canvasHolder.clientWidth * (sizeMultiplier ? sizeMultiplier : 1),\r\n      height\r\n        ? height\r\n        : canvasHolder.clientHeight * (sizeMultiplier ? sizeMultiplier : 1)\r\n    );\r\n    canvas.id = id;\r\n    this.canvasNode = canvasHolder.appendChild(canvas);\r\n    this.canvasContext = this.canvasNode.getContext(\"2d\");\r\n  }\r\n\r\n  resizeHandle = () => {\r\n    const currentImage = this.canvasContext!.getImageData(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.canvasNode.width = this.canvasHolder.clientWidth * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n    this.canvasNode.height = this.canvasHolder.clientHeight * (this.sizeMultiplier ? this.sizeMultiplier : 1);\r\n\r\n    this.canvasContext!.putImageData(currentImage,0,0);\r\n  };\r\n\r\n  abstract draw() : void;\r\n\r\n  clear = () => {\r\n    this.canvasContext!.fillStyle = \"rgba(0,0,0,0)\";\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\n\r\nexport class ColorSelectionCanvas extends Canvas {\r\n  private selectedColor: string = \"rgba(255,0,0,1)\";\r\n  private drawingColor: string = \"rgba(255,0,0,1)\";\r\n  private selectedColorAsRGBAObject: {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a: number;\r\n  } = { r: 255, g: 0, b: 0, a: 1 };\r\n  /*private selectedColorAsHSLAObject: {\r\n    h: number;\r\n    s: number;\r\n    l: number;\r\n    a: number;\r\n  };*/\r\n  private isDragging: boolean = false;\r\n  private onColorSelect: (color: string) => any;\r\n\r\n  constructor(\r\n    canvasHolder: HTMLElement,\r\n    onColorSelect: (color: string) => any,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    super(canvasHolder,'color-selection-canvas',1, width, height);\r\n    this.onColorSelect = onColorSelect;\r\n    this.canvasNode.addEventListener(\"click\", this.changeColor);\r\n    this.canvasNode.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.changeColor(e);\r\n    });\r\n    this.canvasNode.addEventListener(\"mouseup\", e => {\r\n      this.isDragging = false;\r\n    });\r\n    this.canvasNode.addEventListener(\"mousemove\", e => {\r\n      if (this.isDragging) {\r\n        this.changeColor(e);\r\n      }\r\n    });\r\n    this.draw();\r\n  }\r\n\r\n  rgbatohsla = (r:number, g:number, b:number, a:number) => {\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n    if (delta == 0) h = 0;\r\n    else if (cmax == r) h = ((g - b) / delta) % 6;\r\n    else if (cmax == g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n    h = Math.round(h * 60);\r\n    if (h < 0) h += 360;\r\n    l = (cmax + cmin) / 2;\r\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n    //return \"hsla(\" + h + \",\" + s + \"%,\" +l + \"%,\" + a + \")\";\r\n    return { h, s, l, a };\r\n  };\r\n\r\n  hslatorgba = (h:number,s:number,l:number, a:number) => {\r\n    s /= 100;\r\n    l /= 100;\r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n        m = l - c/2,\r\n        r = 0,\r\n        g = 0,\r\n        b = 0;\r\n    if (0 <= h && h < 60) {\r\n      r = c; g = x; b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x; g = c; b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0; g = c; b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0; g = x; b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x; g = 0; b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c; g = 0; b = x;\r\n    }\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n    return {r,g,b,a};\r\n  };\r\n\r\n  setNewHue = (hue: number) => {\r\n    const hsla = this.rgbatohsla(\r\n      this.selectedColorAsRGBAObject.r,\r\n      this.selectedColorAsRGBAObject.g,\r\n      this.selectedColorAsRGBAObject.b,\r\n      this.selectedColorAsRGBAObject.a\r\n    );\r\n    const rgbaSelected = this.hslatorgba(hue,100,50,hsla.a);\r\n    const rgbaDrawing = this.hslatorgba(hue,hsla.s,hsla.l,hsla.a);\r\n    this.selectedColor = \"rgba(\" + rgbaSelected.r + \",\" + rgbaSelected.g + \",\" + rgbaSelected.b + \",\" + rgbaSelected.a + \")\";\r\n    this.drawingColor = \"rgba(\" + rgbaDrawing.r + \",\" + rgbaDrawing.g + \",\" + rgbaDrawing.b + \",\" + rgbaDrawing.a + \")\";\r\n    this.selectedColorAsRGBAObject = rgbaDrawing;\r\n    this.onColorSelect(this.drawingColor);\r\n    this.draw();\r\n  };\r\n\r\n  changeColor = (e: MouseEvent) => {\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n    this.drawingColor =\r\n      \"rgba(\" + imageData[0] + \",\" + imageData[1] + \",\" + imageData[2] + \",1)\";\r\n    this.selectedColorAsRGBAObject = {\r\n      r: imageData[0],\r\n      g: imageData[1],\r\n      b: imageData[2],\r\n      a: imageData[3]\r\n    };\r\n    this.onColorSelect(this.drawingColor);\r\n  };\r\n\r\n  drawGradientsOnColorSelectionCanvas = () => {\r\n    const grdWhite = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      0\r\n    );\r\n    grdWhite.addColorStop(0, \"rgba(255,255,255,1)\");\r\n    grdWhite.addColorStop(1, \"rgba(255,255,255,0)\");\r\n    this.canvasContext!.fillStyle = grdWhite;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n\r\n    const grdBlack = this.canvasContext!.createLinearGradient(\r\n      0,\r\n      0,\r\n      0,\r\n      this.canvasNode.height\r\n    );\r\n    grdBlack.addColorStop(0, \"rgba(0,0,0,0)\");\r\n    grdBlack.addColorStop(1, \"rgba(0,0,0,1)\");\r\n    this.canvasContext!.fillStyle = grdBlack;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n  };\r\n\r\n  draw = () => {\r\n    this.canvasContext!.fillStyle = this.selectedColor;\r\n    this.canvasContext!.fillRect(\r\n      0,\r\n      0,\r\n      this.canvasNode.width,\r\n      this.canvasNode.height\r\n    );\r\n    this.drawGradientsOnColorSelectionCanvas();\r\n  };\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\n\r\nexport class HueSelectionCanvas extends Canvas {\r\n    private selectedHue: string = \"rgba(0,0,0,1)\";\r\n    private isDragging: boolean = false;\r\n    private onHueSelect: (hue:number) => any;\r\n\r\n    constructor(\r\n        canvasHolder: HTMLElement,\r\n        onHueSelect: (hue: number) => any,\r\n        width?: number,\r\n        height?: number\r\n    ) {\r\n        super(canvasHolder,'hue-selection-canvas',1, width, height);\r\n        this.onHueSelect = onHueSelect;\r\n        this.canvasNode.addEventListener(\"click\", this.changeHue);\r\n        this.canvasNode.addEventListener(\"mousedown\", e => {\r\n            this.isDragging = true;\r\n            this.changeHue(e);\r\n        });\r\n        this.canvasNode.addEventListener(\"mouseup\", e => {\r\n            this.isDragging = false;\r\n        });\r\n        this.canvasNode.addEventListener(\"mousemove\", e => {\r\n            if (this.isDragging) {\r\n                this.changeHue(e);\r\n            }\r\n        });\r\n        this.draw();\r\n    }\r\n\r\n    changeHue = (e: MouseEvent) => {\r\n        const x = e.offsetX;\r\n        const y = e.offsetY;\r\n        const imageData = this.canvasContext!.getImageData(x, y, 1, 1).data;\r\n        const hue = this.getHueFromRGB(imageData[0],imageData[1],imageData[2]);\r\n        this.onHueSelect(hue);\r\n    };\r\n\r\n    getHueFromRGB = (r:number, g:number, b:number) => {\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0\r\n        if (delta == 0) h = 0;\r\n        else if (cmax == r) h = ((g - b) / delta) % 6;\r\n        else if (cmax == g) h = (b - r) / delta + 2;\r\n        else h = (r - g) / delta + 4;\r\n        h = Math.round(h * 60);\r\n        if (h < 0) h += 360;\r\n        return h\r\n    };\r\n\r\n    draw = () => {\r\n        this.canvasContext!.rect(\r\n            0,\r\n            0,\r\n            this.canvasNode.width,\r\n            this.canvasNode.height\r\n        );\r\n        const grd1 = this.canvasContext!.createLinearGradient(\r\n            0,\r\n            0,\r\n            0,\r\n            this.canvasNode.height\r\n        );\r\n        grd1.addColorStop(0, \"rgba(255, 0, 0, 1)\");\r\n        grd1.addColorStop(0.17, \"rgba(255, 255, 0, 1)\");\r\n        grd1.addColorStop(0.34, \"rgba(0, 255, 0, 1)\");\r\n        grd1.addColorStop(0.51, \"rgba(0, 255, 255, 1)\");\r\n        grd1.addColorStop(0.68, \"rgba(0, 0, 255, 1)\");\r\n        grd1.addColorStop(0.85, \"rgba(255, 0, 255, 1)\");\r\n        grd1.addColorStop(1, \"rgba(255, 0, 0, 1)\");\r\n        this.canvasContext!.fillStyle = grd1;\r\n        this.canvasContext!.fill();\r\n    };\r\n}\r\n","import { ColorSelectionCanvas } from \"./ColorSelectionCanvas\";\r\nimport { HueSelectionCanvas } from \"./HueSelectionCanvas\";\r\n\r\nexport class CanvasSettings {\r\n  currentColor: string = \"rgba(255,0,0,1)\";\r\n  pencilWidth: number = 15;\r\n  private colorDisplay: HTMLElement;\r\n  private colorPicker: ColorSelectionCanvas;\r\n  private huePicker: HueSelectionCanvas;\r\n  private sizePicker: HTMLElement;\r\n\r\n  constructor(mainAppHolder: HTMLElement) {\r\n    const settingsHolder = document.createElement(\"div\");\r\n    settingsHolder.id = \"settings-holder\";\r\n    mainAppHolder.appendChild(settingsHolder);\r\n\r\n    const currentColorWrapper = document.createElement('div');\r\n    currentColorWrapper.id = \"current-color-wrapper\";\r\n    settingsHolder.appendChild(currentColorWrapper);\r\n\r\n    const currentlySelectedColor = document.createElement(\"div\");\r\n    currentlySelectedColor.id = \"current-color\";\r\n    currentlySelectedColor.style.background = this.currentColor;\r\n    currentColorWrapper.appendChild(currentlySelectedColor);\r\n    this.colorDisplay = currentlySelectedColor;\r\n\r\n    const sizePicker = document.createElement(\"input\");\r\n    sizePicker.type = \"range\";\r\n    sizePicker.min = \"1\";\r\n    sizePicker.max=\"50\";\r\n    sizePicker.value = \"15\";\r\n    sizePicker.oninput = this.changePencilSize;\r\n    sizePicker.id = \"pencil-size-picker\";\r\n    settingsHolder.appendChild(sizePicker);\r\n    this.sizePicker = sizePicker;\r\n\r\n    const colorSelectionWrapper = document.createElement(\"div\");\r\n    colorSelectionWrapper.id = \"color-selection-wrapper\";\r\n    settingsHolder.appendChild(colorSelectionWrapper);\r\n\r\n    const hueSelectionWrapper = document.createElement(\"div\");\r\n    hueSelectionWrapper.id = \"hue-selection-wrapper\";\r\n    settingsHolder.appendChild(hueSelectionWrapper);\r\n\r\n    this.colorPicker = new ColorSelectionCanvas(\r\n      colorSelectionWrapper,\r\n      this.changeCurrentlySelectedColor\r\n    );\r\n    this.huePicker = new HueSelectionCanvas(\r\n      hueSelectionWrapper,\r\n      this.colorPicker.setNewHue\r\n    );\r\n    this.changeCurrentlySelectedColor(\"rgba(255,0,0,1)\");\r\n    this.changePencilSize({target: {value: \"15\"}})\r\n  }\r\n\r\n  changeCurrentlySelectedColor = (color: string) => {\r\n    this.currentColor = color;\r\n    this.colorDisplay.style.background = color;\r\n  };\r\n\r\n  //TODO: change this type to proper one\r\n  changePencilSize = (size: any) => {\r\n    this.pencilWidth = Number(size.target.value);\r\n    this.colorDisplay.style.width = this.pencilWidth + \"px\";\r\n    this.colorDisplay.style.height = this.pencilWidth + \"px\";\r\n  }\r\n}\r\n","import { Canvas } from \"./Canvas\";\r\nimport {CanvasSettings} from \"./CanvasSettings\";\r\n\r\nexport class CanvasBackground extends Canvas {\r\n  //private currentSetting: number;\r\n\r\n  constructor(mainAppHolder: HTMLElement,sizeMultiplier:number) {\r\n    super(mainAppHolder, \"background-canvas\",sizeMultiplier);\r\n  }\r\n\r\n  draw = () => {\r\n    const w = this.canvasNode.width;\r\n    const h = this.canvasNode.height;\r\n\r\n    this.canvasContext!.fillStyle = \"white\";\r\n    this.canvasContext!.fillRect(0, 0, w, h);\r\n    const ctx = this.canvasContext;\r\n    ctx!.translate(0.5, 0.5);\r\n    ctx!.beginPath();\r\n\r\n    const gridSpacing = 40;\r\n    const gridSpacingBigger = 5*gridSpacing;\r\n\r\n    for (let x = w/2,i=x; x <= w; x += gridSpacing,i-=gridSpacing) {\r\n      for (let y = h/2,j=y; y <= h; y += gridSpacing,j-=gridSpacing) {\r\n        ctx!.moveTo(x, 0);\r\n        ctx!.lineTo(x, h);\r\n        ctx!.moveTo(i, 0);\r\n        ctx!.lineTo(i, h);\r\n        ctx!.moveTo(0, y);\r\n        ctx!.lineTo(w, y);\r\n        ctx!.moveTo(0, j);\r\n        ctx!.lineTo(w, j);\r\n      }\r\n    }\r\n    ctx!.lineWidth = 1;\r\n    ctx!.strokeStyle = 'rgb(189,189,189)';\r\n    ctx!.stroke();\r\n    ctx!.beginPath();\r\n    ctx!.translate(0.5, 0.5);\r\n    ctx!.lineWidth = 2;\r\n    ctx!.strokeStyle = 'rgb(170,170,170)';\r\n\r\n    for (let x = w/2,i=x; x <= w; x += gridSpacingBigger,i-=gridSpacingBigger) {\r\n      for (let y = h/2,j=y; y <= h; y += gridSpacingBigger,j-=gridSpacingBigger) {\r\n        ctx!.moveTo(x, 0);\r\n        ctx!.lineTo(x, h);\r\n        ctx!.moveTo(i, 0);\r\n        ctx!.lineTo(i, h);\r\n        ctx!.moveTo(0, y);\r\n        ctx!.lineTo(w, y);\r\n        ctx!.moveTo(0, j);\r\n        ctx!.lineTo(w, j);\r\n      }\r\n    }\r\n    ctx!.stroke();\r\n  };\r\n\r\n  resizeBackgroundHandle = () =>{\r\n    this.resizeHandle();\r\n    this.draw();\r\n  }\r\n}\r\n","import {DrawitCanvas} from \"./index\";\r\nimport './styles/normalize.css';\r\nimport './styles/index.css';\r\n\r\nconst app = document.getElementById(\"app\");\r\n\r\nnew DrawitCanvas(app!);\r\n","import {MainCanvas} from \"./models/Canvases/MainCanvas\";\r\nimport {CanvasSettings} from \"./models/Canvases/CanvasSettings\";\r\nimport {CanvasBackground} from \"./models/Canvases/CanvasBackground\";\r\n\r\nexport class DrawitCanvas {\r\n  private mainCanvas: MainCanvas;\r\n  private mainAppHolder: HTMLElement;\r\n  private canvasSettings: CanvasSettings;\r\n  private canvasBackground: CanvasBackground;\r\n\r\n  constructor(mainAppHolder: HTMLElement) {\r\n    this.mainAppHolder = mainAppHolder;\r\n    this.canvasSettings = new CanvasSettings(mainAppHolder);\r\n    this.canvasBackground = new CanvasBackground(mainAppHolder,0.95);\r\n    this.canvasBackground.draw();\r\n    this.mainCanvas = new MainCanvas(mainAppHolder, this.canvasSettings,0.95);\r\n    window.onresize = () =>{\r\n      this.mainCanvas.resizeHandle();\r\n      this.canvasBackground.resizeBackgroundHandle();\r\n    }\r\n  }\r\n}\r\n"],"names":["$bda3a10be9ee4270d4f86abfc4e03f28$export$df31e050f7830d4e","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader","$3d568c82617e7b1d5489b8b10d21f92c$export$ef3cdf9e6c1e6ae8","x1","y1","z1","x","y","z","i","[object Object]","this","v","k","Math","sqrt","len","t","a","$e9c9a741b82784b8545fc1ff4318a1c5$export$495a362d35d352a","points","tmp","count","length","position","Float32Array","prev","next","index","Uint16Array","side","uv","set","ind","updateGeometry","forEach","p","i1","toArray","copy","sub","add","push","shift","$c2734b58225bed84f71a7bc93cca6593$export$40949d8a0729a108","canvasHolder","id","sizeMultiplier","width","height","enabled","mouse","createCanvas","width1","height1","canvas","document","createElement","webGLShadersInitialize","vertexShader","canvasContext","VERTEX_SHADER","$parcel$interopDefault","fragmentShader","FRAGMENT_SHADER","webGLProgram","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","$bda3a10be9ee4270d4f86abfc4e03f28$export$fc30daf4b37df0c8","enable","DEPTH_TEST","useProgram","prev_positionAttributeLocation","getAttribLocation","positionAttributeLocation","next_positionAttributeLocation","sideAttributeLocation","uvAttributeLocation","prev_positionBuffer","createBuffer","next_positionBuffer","positionBuffer","sideBuffer","uvBuffer","colorUniformLocation","getUniformLocation","uniform4f","random","resolutionUniformLocation","resizeHandle","viewport","canvasNode","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","uniform2f","FLOAT","normalize","polyline","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","enableVertexAttribArray","drawArrays","TRIANGLE_STRIP","drawCursor","e","offsetX","offsetY","spring","friction","mouseVelocity","displayWidth","clientWidth","displayHeight","clientHeight","appendChild","getContext","updateBuffersAndDraw","lerp","scale","requestAnimationFrame","draw","settings","super","isDrawing","mouseX","mouseY","startDrawing","stopDrawing","doDrawing","addEventListener","$8f3fc5860ee36042c9ff13badd750af3$export$557110b7a952b643","currentImage","getImageData","putImageData","fillStyle","fillRect","$d7f62f1d756e088dcce22647f1421dac$export$c53a8a34e7d280a9","onColorSelect","selectedColor","drawingColor","selectedColorAsRGBAObject","r","g","b","cmin","min","cmax","max","delta","h","s","l","round","abs","toFixed","c","m","hue","hsla","rgbatohsla","rgbaSelected","hslatorgba","rgbaDrawing","imageData","data","grdWhite","createLinearGradient","addColorStop","grdBlack","drawGradientsOnColorSelectionCanvas","changeColor","isDragging","$4bbbe35dccb64be8b8d8b5ca95ebfe37$export$725b5a17dc4090a9","onHueSelect","selectedHue","changeHue","getHueFromRGB","rect","grd1","fill","$9d03976610f8b8aa635138a80c77cdbe$export$42c0a7d73bfa1c84","mainAppHolder","currentColor","pencilWidth","changeCurrentlySelectedColor","color","colorDisplay","style","background","changePencilSize","size","Number","target","value","settingsHolder","currentColorWrapper","currentlySelectedColor","sizePicker","oninput","colorSelectionWrapper","hueSelectionWrapper","colorPicker","huePicker","setNewHue","$c72792cd5a2dd7194da9765024e18c0d$export$42dd41e79c2e6bdc","w","ctx","translate","beginPath","gridSpacingBigger","j","moveTo","lineTo","lineWidth","strokeStyle","stroke","j1","resizeBackgroundHandle","$5f7e542d517e9256d0fe6f959132b806$var$app","getElementById","canvasSettings","canvasBackground","mainCanvas","window","onresize"],"version":3,"file":"index.285e6f42.js.map"}